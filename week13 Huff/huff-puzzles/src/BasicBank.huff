/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#include "Huff-Console/Console.huff"
#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro BALANCE() = takes (1) returns (1) {
	sload
}
#define macro WITHDRAW() = takes (1) returns (0) {
	dup1
	dup1 //[vwithdraw, vwithdraw, vwithdraw]

	caller
	
	sload // [amount, vwithdraw, vwithdraw, vwithdraw]

	dup1 // [amount, amount, vwithdraw, vwithdraw, vwithdraw]

	swap2 //[vwithdraw, amount, amount, vwithdraw, vwithdraw]

	swap1 //[amount, vwithdraw, amount, vwithdraw, vwithdraw]

	lt

	_re jumpi


	sub

	caller 

	sstore

	0x00 0x00 0x00 0x00 swap4 caller 0x00 call

	_final jump
_re:
	0x00 0x00 revert
_final:
	

}
#define macro MAIN() = takes(0) returns(0) {

	0x04 calldataload


	0x00 calldataload      

	0xE0 shr

	dup1

	__FUNC_SIG(balanceOf)      

	// LOG_STACK_2(0x10)
    	eq                   
	// LOG_STACK_1(0x10)
    	_balanceOf jumpi      

	__FUNC_SIG(withdraw)      

	eq

	_withdraw jumpi

	caller
	sload
	callvalue
	add
	caller
	sstore
        0x00 0x00 return 	

    	// 0x00 0x00 revert

	// end jump

_balanceOf:
	pop

       	BALANCE()

	final jump

_withdraw:
	WITHDRAW()	

final:
	0x00 mstore
        0x20 0x00 return
}